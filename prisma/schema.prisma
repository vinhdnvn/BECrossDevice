// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User{
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   email   String   @unique
//   image   String
//   name    String
//   posts   Post[]
//   comments Comment[]
//   groups  Group[]

// }


// model Post {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   title  String
//   text   String
//   image  String
//   usersId String @db.ObjectId
//   users    User   @relation(fields: [usersId], references: [id])

//   // comment relations
//   comments Comment[]
  
//   groupId  String @db.ObjectId
//   group    Group  @relation(fields: [groupId], references: [id])
// }


// model Comment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   text   String
//   image  String
//   postId String @db.ObjectId
//   post   Post   @relation(fields: [postId], references: [id])
//   // user relations
//   usersId String @db.ObjectId
//   users    User   @relation(fields: [usersId], references: [id])

// }

// // create Group model have relationship many to many with user model
// model Group {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   name  String

//   usersId String @db.ObjectId
//   users    User   @relation(fields: [usersId], references: [id])

//   posts Post[]


// }

model Post {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  id_default       Int
  image_buffering String
  question_User    String
  answer_User      String
  type             String
  like_int         Int
  Group            Group        @relation(fields: [group_id], references: [id])
  group_id         String       @db.ObjectId
  Comment          Comment[]


}

model Group {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  id_default Int
  title_string String
  User       User[]
  Posts      Post[]
  }

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  id_default Int
  Name_string String
  Email_string String
  Adress_string String
  Role_string String
  Group      Group     @relation(fields: [group_id], references: [id])
  group_id   String    @db.ObjectId
  Comment    Comment[]
  Student    Student?
  Tutor      Tutor?
}

model Comment {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  id_default Int
  content_string String
  image_buffer String
  Post       Post    @relation(fields: [post_id], references: [id])
  post_id    String  @db.ObjectId
  User       User    @relation(fields: [user_id], references: [id])
  user_id    String  @db.ObjectId
}

model Student {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  Class_int  Int
  User       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String  @unique @db.ObjectId
}

model Tutor {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  Rating_float Float
  Point_int   Int
  User        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String  @unique @db.ObjectId
}




